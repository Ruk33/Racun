package AI

import LinkedList
import Vectors

vec2 array waypoints
int waypointsCount

public abstract class AI
	/**
	 * Unidad que hace de boss
	 */
	protected unit boss = null
	
	/**
	 * Objetivo del boss
	 */
	protected unit target
	
	/**
	 * Funcion que se ejecuta cuando el objeto cambia
	 */
	abstract function onTargetChanges()
	
	/**
	 * Obter unidad que hace de boss
	 */
	function getBoss() returns unit
		return this.boss
		
	/**
	 * Asignamos el objetivo del boss
	 */
	function setTarget(unit target)
		if ( this.target != target )
			this.target = target
			if ( this.target != null )
				this.onTargetChanges()
	
	/**
	 * Obtener objetivo del boss
	 */
	function getTarget() returns unit
		return this.target
	
	/**
     * Atacar objetivo
     */
	function attackTarget()
		IssueTargetOrder(this.boss, "attack", this.target)
	
	/**
	 * Asignamos el objetivo del boss
	 * a la unidad mas debil que encuentre
	 */
	function setTargetToWeaker(real range)
		player bossOwner = this.boss.getOwner()
		real targetHp = GetWidgetLife(this.target)
		unit weaker = null
		real weakerHp = 99999999
		real enumLife
		unit enumUnit
		
		if ( this.target != null or targetHp < 0.406 )
			targetHp = 99999999			
		
		GroupEnumUnitsInRange(bj_lastCreatedGroup, this.boss.getX(), this.boss.getY(), range, null)
		
		enumUnit = FirstOfGroup(bj_lastCreatedGroup)
		
		while ( enumUnit != null )
			GroupRemoveUnit(bj_lastCreatedGroup, enumUnit)
			
			enumLife = GetWidgetLife(enumUnit)
			if ( IsUnitEnemy(enumUnit, bossOwner) and enumLife < targetHp and enumLife < weakerHp and enumLife > 0.405 )
				weaker = enumUnit
				weakerHp = enumLife
				
			enumUnit = FirstOfGroup(bj_lastCreatedGroup)
		
		this.setTarget(weaker)
		
		bossOwner = null
		weaker = null
	
	/**
	 * Contar enemigos cercanos a un punto
	 */
	function countEnemiesArround(real range, real x, real y) returns int
		player bossOwner = this.boss.getOwner()
		int count = 0
		unit enumUnit
		
		GroupEnumUnitsInRange(bj_lastCreatedGroup, x, y, range, null)
		
		enumUnit = FirstOfGroup(bj_lastCreatedGroup)
		
		while ( enumUnit != null )
			GroupRemoveUnit(bj_lastCreatedGroup, enumUnit)
			
			if ( IsUnitEnemy(enumUnit, bossOwner) and IsUnitType(enumUnit, UNIT_TYPE_DEAD) == false )
				count++
			
			enumUnit = FirstOfGroup(bj_lastCreatedGroup)
			
		bossOwner = null
		
		return count
	
	/**
	 * Obtenemos location mediante indice del linked list waypoints
	 */
	function getLocationFromIndex(int index) returns vec2
		return waypoints[index]
		
	function getRandomLocation() returns vec2
		return getLocationFromIndex(GetRandomInt(0, waypointsCount-1))
	
	/**
	 * Obtenemos waypoint conveniente (donde no
	 * hay enemigos).
	 *
	 * @return int index Index del LinkedList waypoints o -1 (si es este ultimo significa que no hay waypoint sin enemigos)
	 */
	function getConvenientLocation(real radius) returns int
		// boss location
		vec2 b = vec2(this.boss.getX(), this.boss.getY())
		// waypoint
		vec2 w
		// index
		int i = waypointsCount - 1
		// indice a devolver
		int r = -1
		
		while ( i > -1 )
			w = this.getLocationFromIndex(i)

			if ( this.countEnemiesArround(radius, w.x, w.y) == 0 and b.distToVec(w) > radius )
				r = i
				break
				
			i--
		
		// no podemos devolver directamente
		// location, porque en caso de no encontrar
		// tendriamos que devolver null
		// sadly, null != location
		return r
		
	/**
	 * Obtenemos el indice del waypoint que este
	 * mas alejado de una locacion
	 */
	function getFarWaypointIndex(vec2 loc) returns int
		vec2 waypoint
		real tmpDistance
		real distance = 0
		int index = -1
		int i = waypointsCount - 1
		
		while ( i > -1 )
			waypoint = this.getLocationFromIndex(i)
			tmpDistance = loc.distToVec(waypoint)
			if ( tmpDistance > distance )
				distance = tmpDistance
				index = i
			
			i--
			
		return index
	
	/**
	 * Crear waypoints
	 */
	function createWaypoints(int amount)
		/*
		// angulo
		real a = 0
		// hacemos un circulo
		real sum = 360 / amount
		// distancia entre waypoints
		real dis = 500
		// no podemos modificar directamente amount
		int i = amount+1
		
		this.waypoints = new LinkedList<location>
		
		// centro
		this.waypoints.add(Location(0, 0))
		
		// circular
		while ( i > 0 )
			this.waypoints.add(Location(dis * Cos(a * bj_DEGTORAD), dis * Sin(a * bj_DEGTORAD)))
			
			a += sum
			i--
		*/
		
		// hard coded para que encaje bien en el mapa de wonder
		// maldito wonder <.<		
		waypoints[0] = vec2(-650, -321)
		waypoints[1] = vec2(35, 330)
		waypoints[2] = vec2(-20, -220)
		waypoints[3] = vec2(-650, -321)
		waypoints[4] = vec2(-25, -925)
		waypoints[5] = vec2(630, -276)
		
		waypointsCount = 6